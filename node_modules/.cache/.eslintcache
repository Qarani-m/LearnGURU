[{"/Users/scott/Desktop/LearnGURU/src/index.js":"1","/Users/scott/Desktop/LearnGURU/src/reportWebVitals.js":"2","/Users/scott/Desktop/LearnGURU/src/App.js":"3","/Users/scott/Desktop/LearnGURU/src/auth/UserContext.js":"4","/Users/scott/Desktop/LearnGURU/src/api/api.js":"5","/Users/scott/Desktop/LearnGURU/src/NavBar.js":"6","/Users/scott/Desktop/LearnGURU/src/auth/LoginForm.js":"7","/Users/scott/Desktop/LearnGURU/src/auth/InstructorLoginForm.js":"8","/Users/scott/Desktop/LearnGURU/src/auth/SignupForm.js":"9","/Users/scott/Desktop/LearnGURU/src/Homepage/Homepage.js":"10","/Users/scott/Desktop/LearnGURU/src/Profile/ProfileForm.js":"11","/Users/scott/Desktop/LearnGURU/src/courses/CourseList.js":"12","/Users/scott/Desktop/LearnGURU/src/Instructors/InstructorBio.js":"13","/Users/scott/Desktop/LearnGURU/src/hooks/useLocalStorage.js":"14","/Users/scott/Desktop/LearnGURU/src/courses/CourseDetail.js":"15","/Users/scott/Desktop/LearnGURU/src/courses/CourseCard.js":"16","/Users/scott/Desktop/LearnGURU/src/courses/CourseRating.js":"17","/Users/scott/Desktop/LearnGURU/src/Homepage/HomeBio.js":"18","/Users/scott/Desktop/LearnGURU/src/common/Alert.js":"19"},{"size":591,"mtime":1693604930000,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1693604930000,"results":"22","hashOfConfig":"21"},{"size":3823,"mtime":1694868992700,"results":"23","hashOfConfig":"21"},{"size":432,"mtime":1693604930000,"results":"24","hashOfConfig":"21"},{"size":4424,"mtime":1694375228000,"results":"25","hashOfConfig":"21"},{"size":974,"mtime":1693604930000,"results":"26","hashOfConfig":"21"},{"size":4511,"mtime":1694868939752,"results":"27","hashOfConfig":"21"},{"size":4261,"mtime":1694868853169,"results":"28","hashOfConfig":"21"},{"size":6423,"mtime":1693604930000,"results":"29","hashOfConfig":"21"},{"size":362,"mtime":1693604930000,"results":"30","hashOfConfig":"21"},{"size":7284,"mtime":1694868470744,"results":"31","hashOfConfig":"21"},{"size":1504,"mtime":1693604930000,"results":"32","hashOfConfig":"21"},{"size":1439,"mtime":1693604930000,"results":"33","hashOfConfig":"21"},{"size":1049,"mtime":1693604930000,"results":"34","hashOfConfig":"21"},{"size":2999,"mtime":1694378938000,"results":"35","hashOfConfig":"21"},{"size":1688,"mtime":1694356017000,"results":"36","hashOfConfig":"21"},{"size":3980,"mtime":1694378257000,"results":"37","hashOfConfig":"21"},{"size":2055,"mtime":1693604930000,"results":"38","hashOfConfig":"21"},{"size":519,"mtime":1693604930000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"srx7hl",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/Users/scott/Desktop/LearnGURU/src/index.js",[],[],[],"/Users/scott/Desktop/LearnGURU/src/reportWebVitals.js",[],[],"/Users/scott/Desktop/LearnGURU/src/App.js",["99"],[],"/Users/scott/Desktop/LearnGURU/src/auth/UserContext.js",[],[],"/Users/scott/Desktop/LearnGURU/src/api/api.js",[],[],"/Users/scott/Desktop/LearnGURU/src/NavBar.js",[],[],"/Users/scott/Desktop/LearnGURU/src/auth/LoginForm.js",["100"],[],"/Users/scott/Desktop/LearnGURU/src/auth/InstructorLoginForm.js",["101"],[],"/Users/scott/Desktop/LearnGURU/src/auth/SignupForm.js",[],[],"/Users/scott/Desktop/LearnGURU/src/Homepage/Homepage.js",[],[],"/Users/scott/Desktop/LearnGURU/src/Profile/ProfileForm.js",["102","103","104","105","106","107"],[],"import React, { useState, useContext, useEffect } from \"react\";\nimport Alert from \"../common/Alert\";\nimport UserContext from \"../auth/UserContext\";\nimport LearnGuruApi from \"../api/api\";\nimport { useJwt } from \"react-jwt\";\nimport useLocalStorage from \"../hooks/useLocalStorage.js\";\n\n/** Form to edit an existing user\n * \n * Displays profile form and handles change to local form state.\n * Confirmation of a successful signals a simple <Alert>\n * \n * Routed as /profile\n * Router -> ProfileForm -> Alert\n *\n */\n\nconst ProfileForm = () => {\n    const { currentUser, setCurrentUser } = useContext(UserContext);\n\n    // Define default values for the form fields\n    const defaultFormData = {\n        first_name: \"\",\n        last_name: \"\",\n        email: \"\",\n        username: \"\",\n        profile_picture: \"\",\n    };\n\n    const initialFormData = currentUser ? { ...defaultFormData, ...currentUser } : defaultFormData;\n\n    const [formData, setFormData] = useState(initialFormData);\n\n    const [formErrors, setFormErrors] = useState([]);\n    const [saveConfirmed, setSaveConfirmed] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [token] = useLocalStorage(\"learnguru-token\");\n\n\n    console.debug(\n        \"ProfileForm\",\n        \"currentUser=\", currentUser,\n        \"formData=\", formData,\n        \"formErrors=\", formErrors,\n        \"saveConfirmed=\", saveConfirmed,\n    )\n\n    /** On form submit:\n     * -attempt to save to backend and report any errors\n     * -if successful:\n     * -    -clear previous error messages and password\n     *      - show save-confirmed message\n     *      - set current user info throughout app\n     * \n     */\n    useEffect(function loadProfile() {\n        async function getCurrentUser() {\n            try {\n                const uname = currentUser.username\n                const { decodedToken, isExpired } = useJwt(token);\n\n\n                const { username } = uname ? { 'username': uname } : useJwt(token);\n\n                let profile = await LearnGuruApi.getProfile(username);\n                setFormData({\n                    firstName: profile.first_name,\n                    lastName: profile.last_name,\n                    email: profile.email,\n                    username: profile.username,\n                    profile_picture: profile.profile_picture,\n                });\n            } catch (err) {\n                console.error(\"ProfileForm loadProfile: problem loading\", err);\n                setFormErrors(err);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        getCurrentUser();\n    }, [currentUser ? currentUser.username : \"\"]);\n\n    async function handleSubmit() {\n\n        let profileData = {\n            username: formData.username,\n            first_name: formData.first_name,\n            last_name: formData.last_name,\n            email: formData.email,\n            profile_picture: formData.profile_picture,\n        };\n\n        let username = formData.username;\n        let updatedProfile;\n\n        try {\n            updatedProfile = await LearnGuruApi.saveProfile(username, profileData);\n        } catch (errors) {\n            setFormErrors(errors);\n            return;\n        }\n\n        setFormData(f => ({ ...f, password: \"\" }));\n        setFormErrors([]);\n        setSaveConfirmed(true);\n\n        // trigger reloading of user information throughout the site\n        setCurrentUser(updatedProfile);\n    }\n\n    /** Handle form data changing */\n    function handleChange(evt) {\n        const { name, value } = evt.target;\n        setFormData((f) => ({\n            ...f,\n            [name]: value,\n        }));\n        setFormErrors([]);\n    };\n\n    function handleFileChange(evt) {\n        const { name, value } = evt.target;\n        setFormData(f => ({\n            ...f,\n            [name]: value,\n        }));\n    }\n\n    return (\n        <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n            <h3>Profile</h3>\n            {isLoading ? (\n                <p>Loading..</p>\n            ) : (\n\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <form method=\"patch\">\n                            <div className=\"form-group\">\n                                <label>Username</label>\n                                <input\n                                    name=\"username\"\n                                    className=\"form-control\"\n                                    value={formData.username}\n                                    disabled\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Uddate First Name</label>\n                                <input\n                                    name=\"first_name\"\n                                    className=\"form-control\"\n                                    value={formData.first_name}\n                                    onChange={handleChange}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Update Last Name</label>\n                                <input\n                                    name=\"last_name\"\n                                    className=\"form-control\"\n                                    value={formData.last_name}\n                                    onChange={handleChange}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Update Email</label>\n                                <input\n                                    name=\"email\"\n                                    className=\"form-control\"\n                                    value={formData.email}\n                                    onChange={handleChange}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Update Profile Picture</label>\n                                <input\n                                    type=\"file\"\n                                    name=\"profile_picture\"\n                                    className=\"form-control\"\n                                    onChange={handleFileChange}\n                                />\n                            </div>\n\n                            {formErrors.length\n                                ? <Alert type=\"danger\" messages={formErrors} />\n                                : null}\n\n                            {saveConfirmed\n                                ?\n                                <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n                                : null}\n\n                            <button\n                                className=\"btn btn-primary btn-block mt-4\"\n                                onClick={handleSubmit}\n                            >\n                                Save Changes\n                            </button>\n                        </form>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n};\n\n\nexport default ProfileForm;","/Users/scott/Desktop/LearnGURU/src/courses/CourseList.js",[],[],"/Users/scott/Desktop/LearnGURU/src/Instructors/InstructorBio.js",[],[],"/Users/scott/Desktop/LearnGURU/src/hooks/useLocalStorage.js",[],[],"/Users/scott/Desktop/LearnGURU/src/courses/CourseDetail.js",[],[],"/Users/scott/Desktop/LearnGURU/src/courses/CourseCard.js",[],[],"/Users/scott/Desktop/LearnGURU/src/courses/CourseRating.js",[],[],"/Users/scott/Desktop/LearnGURU/src/Homepage/HomeBio.js",[],[],"/Users/scott/Desktop/LearnGURU/src/common/Alert.js",[],[],{"ruleId":"108","severity":2,"message":"109","line":42,"column":30,"nodeType":"110","endLine":42,"endColumn":36},{"ruleId":"108","severity":2,"message":"111","line":42,"column":34,"nodeType":"110","endLine":42,"endColumn":40},{"ruleId":"108","severity":2,"message":"112","line":53,"column":35,"nodeType":"110","endLine":53,"endColumn":41},{"ruleId":"113","severity":1,"message":"114","line":60,"column":25,"nodeType":"110","messageId":"115","endLine":60,"endColumn":37},{"ruleId":"113","severity":1,"message":"116","line":60,"column":39,"nodeType":"110","messageId":"115","endLine":60,"endColumn":48},{"ruleId":"108","severity":2,"message":"109","line":60,"column":53,"nodeType":"110","endLine":60,"endColumn":59},{"ruleId":"108","severity":2,"message":"109","line":63,"column":70,"nodeType":"110","endLine":63,"endColumn":76},{"ruleId":"117","severity":1,"message":"118","line":81,"column":8,"nodeType":"119","endLine":81,"endColumn":49,"suggestions":"120"},{"ruleId":"117","severity":1,"message":"121","line":81,"column":9,"nodeType":"122","endLine":81,"endColumn":48},"react-hooks/rules-of-hooks","React Hook \"useJwt\" is called in function \"getCurrentUser\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","Identifier","React Hook \"useJwt\" is called in function \"navigateToUserPage\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","React Hook \"useJwt\" is called in function \"handleSubmit\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","no-unused-vars","'decodedToken' is assigned a value but never used.","unusedVar","'isExpired' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUser.username' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["123"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ConditionalExpression",{"desc":"124","fix":"125"},"Update the dependencies array to be: [currentUser.username, token]",{"range":"126","text":"127"},[2608,2649],"[currentUser.username, token]"]