{"ast":null,"code":"import axios from \"axios\";\nimport { TOKEN_STORAGE_ID } from \"../App\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** api class\n * \n * Static Class tying together get/send to the API\n * \n */\n\nclass LearnGuruApi {\n  // the token for interactions with the API will be stored here\n\n  static async init() {\n    const token = localStorage.getItem(TOKEN_STORAGE_ID);\n    LearnGuruApi.token = token;\n  }\n  static async request(endpoint, data = {}, method = 'get') {\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${LearnGuruApi.token}`\n    };\n    const params = method === 'get' ? data : {};\n    try {\n      const res = await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      });\n      // Check if the response has a data property before accessing it\n      if (res.data) {\n        return res.data;\n      } else {\n        throw new Error(\"Unexpected response from the server.\");\n      }\n    } catch (err) {\n      // Check if err.response exists before accessing its properties\n      if (err.res) {\n        console.error(\"API Error:\", err.response);\n        let message = err.res.data.error.message;\n        throw Array.isArray(message) ? message : [message];\n      } else {\n        console.error(\"API Error:\", err.message);\n        throw new Error(\"Error connecting to the server. Please try again later.\");\n      }\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get all courses */\n\n  static async getCourses(title) {\n    let res = await this.request(\"courses\", {\n      title\n    });\n    return res.courses;\n  }\n\n  /** Get details on a course by course_id. */\n\n  static async getCourse(course_id) {\n    let res = await this.request(`courses/${course_id}`);\n    return res.course;\n  }\n\n  // /** Get all instructors */\n  static async getInstructors() {\n    let res = await this.request(\"instructors\");\n    return res.instructors;\n  }\n  // Get instructor name by instructor_id\n  static async getInstructorName(instructor_id) {\n    let res = await this.request(`instructors/${instructor_id}`);\n    return res.instructor;\n  }\n\n  /** Enroll to a class */\n\n  static async enrollInClass(username, course_id, user_id) {\n    console.log(\"Enrolling User:\", username, \"in Course:\", course_id);\n    return await this.request(\"enrollment\", {\n      \"user_id\": user_id,\n      \"course_id\": course_id\n    }, \"post\");\n  }\n\n  /** Rate course */\n  static async rateCourse(username, user_id, course_id, rating, feedback) {\n    const data = {\n      \"user_id\": user_id,\n      \"course_id\": course_id,\n      \"rating\": rating,\n      \"feedback\": feedback\n    };\n    console.log(\"Rating Course by:\", username, \"Values:\", data);\n    return await this.request(\"rate\", data, 'post');\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`login`, data, \"post\");\n    return res.token;\n  }\n\n  /** Login Instructor and return token */\n  static async loginInstructor(data) {\n    let res = await this.request(\"login_instructor\", data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n  static async register(data) {\n    try {\n      const res = await this.request(\"users\", data, \"post\");\n      return res.user;\n    } catch (error) {\n      console.error(\"Error during signup:\", error);\n      throw new Error(\"Error connecting to the server. Please try again later.\");\n    }\n  }\n\n  // Profile page for user    \n  static async getProfile(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    try {\n      const res = await this.request(`users/${username}`, data, \"patch\");\n      return res;\n    } catch (error) {\n      console.error(\"Error during updating profile:\", error);\n      throw error;\n    }\n  }\n}\nexport default LearnGuruApi;","map":{"version":3,"names":["axios","TOKEN_STORAGE_ID","BASE_URL","process","env","REACT_APP_BASE_URL","LearnGuruApi","init","token","localStorage","getItem","request","endpoint","data","method","console","debug","url","headers","Authorization","params","res","Error","err","error","response","message","Array","isArray","getCurrentUser","username","user","getCourses","title","courses","getCourse","course_id","course","getInstructors","instructors","getInstructorName","instructor_id","instructor","enrollInClass","user_id","log","rateCourse","rating","feedback","login","loginInstructor","register","getProfile","saveProfile"],"sources":["/Users/scott/Desktop/LearnGURU/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\nimport { TOKEN_STORAGE_ID } from \"../App\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** api class\n * \n * Static Class tying together get/send to the API\n * \n */\n\nclass LearnGuruApi {\n    // the token for interactions with the API will be stored here\n    static token;\n\n    static async init() {\n        const token = localStorage.getItem(TOKEN_STORAGE_ID);\n        LearnGuruApi.token = token;\n    }\n\n    static async request(endpoint, data = {}, method = 'get') {\n        console.debug(\"API Call:\", endpoint, data, method);\n\n        const url = `${BASE_URL}/${endpoint}`;\n        const headers = { Authorization: `Bearer ${LearnGuruApi.token}` };\n        const params = (method === 'get')\n            ? data : {};\n        try {\n            const res = (await axios({ url, method, data, params, headers }))\n            // Check if the response has a data property before accessing it\n            if (res.data) {\n                return res.data;\n            } else {\n                throw new Error(\"Unexpected response from the server.\");\n            }\n        } catch (err) {\n            // Check if err.response exists before accessing its properties\n            if (err.res) {\n                console.error(\"API Error:\", err.response);\n                let message = err.res.data.error.message;\n                throw Array.isArray(message) ? message : [message];\n            } else {\n                console.error(\"API Error:\", err.message);\n                throw new Error(\"Error connecting to the server. Please try again later.\");\n            }\n        }\n    }\n\n    // Individual API routes\n\n    /** Get the current user. */\n\n    static async getCurrentUser(username) {\n        let res = await this.request(`users/${username}`);\n        return res.user;\n    }\n\n    /** Get all courses */\n\n    static async getCourses(title) {\n        let res = await this.request(\"courses\", { title });\n        return res.courses;\n    }\n\n    /** Get details on a course by course_id. */\n\n    static async getCourse(course_id) {\n        let res = await this.request(`courses/${course_id}`);\n        return res.course;\n    }\n\n\n    // /** Get all instructors */\n    static async getInstructors() {\n        let res = await this.request(\"instructors\");\n        return res.instructors;\n    }\n    // Get instructor name by instructor_id\n    static async getInstructorName(instructor_id) {\n        let res = await this.request(`instructors/${instructor_id}`);\n        return res.instructor;\n    }\n\n    /** Enroll to a class */\n\n    static async enrollInClass(username, course_id, user_id) {\n        console.log(\"Enrolling User:\", username, \"in Course:\", course_id)\n        return await this.request(\"enrollment\", {\"user_id\": user_id, \"course_id\": course_id}, \"post\")\n    }\n\n    /** Rate course */\n    static async rateCourse(username, user_id, course_id, rating, feedback) {\n        const data = {\"user_id\": user_id, \"course_id\": course_id, \"rating\": rating, \"feedback\": feedback}\n        console.log(\"Rating Course by:\", username, \"Values:\", data);\n        return await this.request(\"rate\", data, 'post');\n    }\n\n    /** Get token for login from username, password. */\n\n    static async login(data) {\n        let res = await this.request(`login`, data, \"post\");\n        return res.token;\n    }\n\n    /** Login Instructor and return token */\n    static async loginInstructor(data) {\n        let res = await this.request(\"login_instructor\", data, \"post\");\n        return res.token\n    }\n\n    /** Signup for site. */\n    static async register(data) {\n        try {\n            const res = await this.request(\"users\", data, \"post\");\n            return res.user;\n        } catch (error) {\n            console.error(\"Error during signup:\", error);\n            throw new Error(\"Error connecting to the server. Please try again later.\");\n        }\n    }\n\n\n    // Profile page for user    \n    static async getProfile(username) {\n        let res = await this.request(`users/${username}`);\n        return res.user;\n    }\n\n\n    /** Save user profile page. */\n\n    static async saveProfile(username, data) {\n        try{\n            const res = await this.request(`users/${username}`, data, \"patch\");\n            return res;\n        } catch (error) {\n            console.error(\"Error during updating profile:\", error);\n            throw(error)\n        }\n    }\n}\n\n\nexport default LearnGuruApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}